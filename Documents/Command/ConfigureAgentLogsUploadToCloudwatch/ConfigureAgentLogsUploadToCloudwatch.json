{
  "schemaVersion":"2.2",
  "description":"Enable or Disable Pushing Agent Logs To CloudWatchLogs For Diagnostic Purposes",
  "parameters": {
    "LogLevel": {
      "type": "String",
      "description": "Log Level of SSM Agent",
      "allowedValues": [
        "Debug",
        "Info",
        "Error"
      ]
    },
    "EnableCloudWatchUpload": {
      "type": "String",
      "description": "Enable Upload of Agent Logs To CloudWatch",
      "allowedValues": [
        "true",
        "false"
      ]
    },
    "LogGroup": {
      "type": "String",
      "default": "",
      "description": "(Optional) Log Group Name. Will use the default group name if not specified. The log group would be created if not already present."
    }
  },
  "mainSteps": [
    {
      "action":"aws:runPowerShellScript",
      "precondition": {
        "StringEquals": ["platformType", "Windows"]
      },
      "name":"UploadSSMAgentLogsInWindows",
      "inputs": {
        "runCommand":[
          "$loglevel = '{{ LogLevel }}'",
          "[bool] $enable = ${{ EnableCloudWatchUpload }}",
          "$logGroup = '{{ LogGroup }}'",
          "$formatID = 'fmtdebug'",
          "$filePath = \"$(${env:ProgramFiles})\\Amazon\\SSM\\seelog.xml\"",
          "",
          "$loglevel = $loglevel.ToLower()",
          "echo \"Log Level:$($loglevel)\"",
          "echo \"CloudWatchLogsUpload:$($enable)\"",
          "echo \"Log Group (Empty For Default):$($logGroup)\"",
          "echo \"Configuration Filepath:$($filePath)\"",
          "",
          "$tempFile = \"$($filePath).temp\"",
          "$writeFile = \"$($filePath).out\"",
          "",
          "#Check if the file is present",
          "If (Test-Path $filePath) {",
          "   echo 'Seelog File Exists'",
          "   Copy-Item $filePath $tempFile",
          "}",
          "Else {",
          "   echo 'Seelog File Does Not Exist'",
          "   $templateFilePath = \"$($filePath).template\"",
          "   If (Test-Path $templateFilePath) {",
          "      echo 'Template File Present'",
          "      Copy-Item $templateFilePath $tempFile",
          "   }",
          "   Else {",
          "      echo 'Template File Not Present'",
          "      exit 1",
          "   }",
          "}",
          "",
          "#Changing the loglevel",
          "$xmlDoc = [System.Xml.XmlDocument](Get-Content $tempFile)",
          "$seelog = $xmlDoc.seelog",
          "$seelog.minlevel = $loglevel",
          "",
          "If ($enable) {",
          "   echo 'Enable CloudWatchLogs Upload'",
          "   $custom = $seelog.outputs.custom",
          "   If ($custom) {",
          "      echo 'Already Uploading To CloudWatch. Updating Configs.'",
          "      $custom.formatid = $formatID",
          "      If ($logGroup) {",
          "         If ($custom.'data-log-group') {",
          "            $custom.'data-log-group' = $logGroup",
          "         }",
          "         Else {",
          "            $logGroupAttribute = $xmlDoc.CreateAttribute('data-log-group')",
          "            $logGroupAttribute.Value = $logGroup",
          "            $custom.Attributes.Append($logGroupAttribute)",
          "         }",
          "      }",
          "   }",
          "   Else {",
          "      echo 'Currently Not Uploading To CloudWatch. Adding Configs.'",
          "      $newcustom = $xmlDoc.CreateElement('custom')",
          "      $nameAttribute = $xmlDoc.CreateAttribute('name')",
          "      $nameAttribute.Value = 'cloudwatch_receiver'",
          "      $newcustom.Attributes.Append($nameAttribute)",
          "      $formatIdAttribute = $xmlDoc.CreateAttribute('formatid')",
          "      $formatIdAttribute.Value = $formatID",
          "      $newcustom.Attributes.Append($formatIdAttribute)",
          "      If ($logGroup) {",
          "            $logGroupAttribute = $xmlDoc.CreateAttribute('data-log-group')",
          "            $logGroupAttribute.Value = $logGroup",
          "            $newcustom.Attributes.Append($logGroupAttribute)",
          "      }",
          "      $xmlDoc.seelog.outputs.AppendChild($newcustom)",
          "   }",
          "}",
          "Else {",
          "   echo 'Disable CloudWatchLogs Upload'",
          "   $custom = $seelog.outputs.custom",
          "   If ($custom) {",
          "      $custom.ParentNode.RemoveChild($custom)",
          "   }",
          "}",
          "$stream = [System.IO.StreamWriter] $writeFile",
          "$xmlDoc.Save($stream)",
          "$stream.Close()",
          "echo 'Applying Changes to Config File'",
          "Move-Item -force $writeFile $filePath",
          "Remove-Item -force $tempFile"
        ]
      }
    },
    {
      "action":"aws:runShellScript",
      "precondition": {
        "StringEquals": ["platformType", "Linux"]
      },
      "name":"UploadSSMAgentLogsInLinux",
      "inputs": {
        "runCommand":[
          "PYTHON_CMD=''",
          "which python3 2>/dev/null",
          "HAS_PYTHON3=$?",
          "which python 2>/dev/null",
          "HAS_PYTHON2=$?",
          "which apt 2>/dev/null",
          "HAS_APT=$?",
          "which yum 2>/dev/null",
          "HAS_YUM=$?",
          "which zypper 2> /dev/null",
          "HAS_ZYPP=$?",
          "",
          "",
          "",
          "check_install_code() {",
          "    if [ $1 -ne 0 ]",
          "    then",
          "        echo \"WARNING: Could not install the $2, this may cause the patching operation to fail.\" >&2",
          "    fi",
          "}",
          "",
          "if [ $HAS_APT -eq 0 -a $HAS_PYTHON3 -eq 0 ]",
          "then",
          "    PYTHON_CMD='python3'",
          "    apt-get install python3-apt -y",
          "    check_install_code $? \"python3-apt\"",
          "    apt-get install python3-six -y",
          "    check_install_code $? \"python3-six\"",
          "",
          "elif [ $HAS_YUM -eq 0 -a $HAS_PYTHON2 -eq 0 ]",
          "then",
          "    PYTHON_CMD='python'",
          "",
          "elif [ $HAS_ZYPP -eq 0 -a $HAS_PYTHON2 ]",
          "then",
          "    PYTHON_CMD='python'",
          "    zypper install -y python-zypp",
          "    check_install_code $? \"python-zypp\"",
          "else",
          "    echo \"An unsupported package manager and python version combination was found. Yum requires Python2 and Apt requires Python 3.\"",
          "    echo \"Python3=$HAS_PYTHON3, Python2=$HAS_PYTHON, Yum=$HAS_YUM, Apt=$HAS_APT.\"",
          "    echo \"Exiting...\"",
          "    exit 1",
          "fi",
          "echo Succeeded to find/install python",
          
          "export LOGLEVEL='{{ LogLevel }}'",
          "export ENABLE={{ EnableCloudWatchUpload }}",
          "export LOGGROUP='{{ LogGroup }}'",
          "export FORMATID='fmtdebug'",
          "export FILEPATH='/etc/amazon/ssm/seelog.xml'",
          "",
          "export LOGLEVEL=$(echo $LOGLEVEL | tr '[:upper:]' '[:lower:]')",
          "echo 'Log Level:'$LOGLEVEL",
          "echo 'CloudWatchLogsUpload:'$ENABLE",
          "echo 'LogGroup (Empty For Default):'$LOGGROUP",
          "echo 'Configurations Filepath:'$FILEPATH",
          "",
          "export TEMPFILE=$FILEPATH'.temp'",
          "",
          "#Check if the file is present",
          "if [ ! -f $FILEPATH ]",
          "then",
          "        echo 'Seelog File Not Present'",
          "        if [ ! -f $FILEPATH'.template' ]",
          "        then",
          "                echo 'Template Not Present. Need the template or seelog config file to configure'",
          "                exit 1",
          "        else",
          "                echo 'Template Present. Copy to temp file'",
          "                cp $FILEPATH'.template' $TEMPFILE",
          "        fi",
          "else",
          "        echo 'Seelog File Present'",
          "        cp $FILEPATH $TEMPFILE",
          "fi",
          "",
          "$PYTHON_CMD -c \"",
          "import os, xml",
          "import xml.etree.ElementTree as ET",
          "print ('Running python code')",
          "TEMPFILE = os.environ['TEMPFILE']",
          "LOGLEVEL = os.environ['LOGLEVEL']",
          "ENABLE = os.environ['ENABLE']",
          "FORMATID = os.environ['FORMATID']",
          "LOGGROUP = os.environ['LOGGROUP']",
          "",
          "print ('TEMPFILE = ' + TEMPFILE)",
          "print ('ENABLE = ' + ENABLE)",
          "",
          "tree = ET.parse(TEMPFILE)",
          "",
          "tree.find('.').set('minlevel', LOGLEVEL)",
          "PRESENCE = tree.find('./outputs/custom') != None",
          "print ('PRESENCE = ' + str(PRESENCE))",
          "if ENABLE == 'true':",
          "    print ('Enable CloudWatchLogs Upload')",
          "    if PRESENCE == True:",
          "        print ('Already Uploading To CloudWatch. Updating Configs.')",
          "        tree.find('./outputs/custom').set('formatid', FORMATID)",
          "        if LOGGROUP:",
          "            tree.find('./outputs/custom').set('data-log-group', LOGGROUP)",
          "    else:",
          "        print ('Currently Not Uploading To CloudWatch. Adding Configs.')",
          "        ET.SubElement(tree.find('./outputs'), 'custom')",
          "        tree.find('./outputs/custom').set('name', 'cloudwatch_receiver')",
          "        tree.find('./outputs/custom').set('formatid', FORMATID)",
          "        if LOGGROUP:",
          "            tree.find('./outputs/custom').set('data-log-group', LOGGROUP)",
          "else:",
          "    print ('Disable CloudWatchLogs Upload')",
          "    if PRESENCE == True:",
          "        tree.find('./outputs').remove(tree.find('./outputs/custom'))",
          "ET.dump(tree)",
          "tree.write(TEMPFILE)",
          "\" || exit 1",
          "",
          "echo 'Applying Changes to Config File'",
          "mv $TEMPFILE $FILEPATH"
        ]
      }
    }
  ]
}

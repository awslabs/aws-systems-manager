{
  "schemaVersion":"2.2",
  "description":"Enable or Disable Pushing Agent Logs To CloudWatchLogs For Diagnostic Purposes",
  "parameters": {
    "LogLevel": {
      "type": "String",
      "description": "Log Level of SSM Agent",
      "allowedValues": [
        "Debug",
        "Info",
        "Error"
      ]
    },
    "EnableCloudWatchUpload": {
      "type": "String",
      "description": "Enable Upload of Agent Logs To CloudWatch",
      "allowedValues": [
        "true",
        "false"
      ]
    },
    "LogGroup": {
      "type": "String",
      "default": "",
      "description": "(Optional) Log Group Name. Will use the default group name if not specified. The log group would be created if not already present."
    },
    "EnableShare": {
      "type": "String",
      "default": "false",
      "description": "(Optional) Enable sharing of logs with CloudWatch of another AWS Account. The ShareDestination parameter needs to be passed if true.",
      "allowedValues": [
        "true",
        "false"
      ]
    },
    "ShareDestination": {
      "type": "String",
      "default": "",
      "description": "(Optional) Destination in the format 'IAMUserAccessKeyID::IAMUserSecretAccessKey::DestinationLogGroup::DestinationLogStream'. The IAM User should have access to DescribeLogStreams, PutLogEvents on the destination CloudWatchLogs resource. The log group and stream should be present. Parameter will be ignored if EnableShare is false",
      "allowedPattern": "(^[\\w]+::.+::[\\.\\-_/#A-Za-z0-9]+::[^:*]+$)|^$"
    }
  },
  "mainSteps": [
    {
      "action":"aws:runPowerShellScript",
      "precondition": {
        "StringEquals": ["platformType", "Windows"]
      },
      "name":"UploadSSMAgentLogsInWindows",
      "inputs": {
        "runCommand":[
          "$loglevel = '{{ LogLevel }}'",
          "[bool] $enable = ${{ EnableCloudWatchUpload }}",
          "$logGroup = '{{ LogGroup }}'",
          "[bool] $enableSharing = ${{ EnableShare }}",
          "$sharingDestination = '{{ ShareDestination }}'",
          "$formatID = 'fmtdebug'",
          "$filePath = \"$(${env:ProgramFiles})\\Amazon\\SSM\\seelog.xml\"",
          "",
          "$loglevel = $loglevel.ToLower()",
          "echo \"Log Level:$($loglevel)\"",
          "echo \"CloudWatchLogsUpload:$($enable)\"",
          "echo \"Log Group (Empty For Default):$($logGroup)\"",
          "echo \"Configuration Filepath:$($filePath)\"",
          "",
          "$tempFile = \"$($filePath).temp\"",
          "$writeFile = \"$($filePath).out\"",
          "",
          "#Check if the file is present",
          "If (Test-Path $filePath) {",
          "   echo 'Seelog File Exists'",
          "   Copy-Item $filePath $tempFile",
          "}",
          "Else {",
          "   echo 'Seelog File Does Not Exist'",
          "   $templateFilePath = \"$($filePath).template\"",
          "   If (Test-Path $templateFilePath) {",
          "      echo 'Template File Present'",
          "      Copy-Item $templateFilePath $tempFile",
          "   }",
          "   Else {",
          "      echo 'Template File Not Present'",
          "      exit 1",
          "   }",
          "}",
          "",
          "#Changing the loglevel",
          "$xmlDoc = [System.Xml.XmlDocument](Get-Content $tempFile)",
          "$seelog = $xmlDoc.seelog",
          "$seelog.minlevel = $loglevel",
          "",
          "If ($enable) {",
          "   echo 'Enable CloudWatchLogs Upload'",
          "   $custom = $seelog.outputs.custom",
          "   If ($custom) {",
          "      echo 'Already Uploading To CloudWatch. Updating Configs.'",
          "      $custom.formatid = $formatID",
          "      If ($logGroup) {",
          "         If ($custom.'data-log-group') {",
          "            $custom.'data-log-group' = $logGroup",
          "         }",
          "         Else {",
          "            $logGroupAttribute = $xmlDoc.CreateAttribute('data-log-group')",
          "            $logGroupAttribute.Value = $logGroup",
          "            $custom.Attributes.Append($logGroupAttribute)",
          "         }",
          "      }",
          "      If ($enableSharing) {",
          "         echo 'Enabling Sharing of Logs to another AWS Account'",
          "         If ($custom.'data-log-sharing-enabled') {",
          "            $custom.'data-log-sharing-enabled' = 'true'",
          "         }",
          "         Else {",
          "            $logSharingAttribute = $xmlDoc.CreateAttribute('data-log-sharing-enabled')",
          "            $logSharingAttribute.Value = 'true'",
          "            $custom.Attributes.Append($logSharingAttribute)",
          "         }",
          "         If ($sharingDestination) {",
          "            If ($custom.'data-sharing-destination') {",
          "               $custom.'data-sharing-destination' = $sharingDestination",
          "            }",
          "            Else {",
          "               $sharingDestinationAttribute = $xmlDoc.CreateAttribute('data-sharing-destination')",
          "               $sharingDestinationAttribute.Value = $sharingDestination",
          "               $custom.Attributes.Append($sharingDestinationAttribute)",
          "            }",
          "         }",
          "      }",
          "      ElseIf ($custom.'data-log-sharing-enabled') {",
          "         $custom.'data-log-sharing-enabled' = 'false'",
          "      }",
          "   }",
          "   Else {",
          "      echo 'Currently Not Uploading To CloudWatch. Adding Configs.'",
          "      $newcustom = $xmlDoc.CreateElement('custom')",
          "      $nameAttribute = $xmlDoc.CreateAttribute('name')",
          "      $nameAttribute.Value = 'cloudwatch_receiver'",
          "      $newcustom.Attributes.Append($nameAttribute)",
          "      $formatIdAttribute = $xmlDoc.CreateAttribute('formatid')",
          "      $formatIdAttribute.Value = $formatID",
          "      $newcustom.Attributes.Append($formatIdAttribute)",
          "      If ($logGroup) {",
          "            $logGroupAttribute = $xmlDoc.CreateAttribute('data-log-group')",
          "            $logGroupAttribute.Value = $logGroup",
          "            $newcustom.Attributes.Append($logGroupAttribute)",
          "      }",
          "      If ($enableSharing) {",
          "            $logSharingAttribute = $xmlDoc.CreateAttribute('data-log-sharing-enabled')",
          "            $logSharingAttribute.Value = 'true'",
          "            $newcustom.Attributes.Append($logSharingAttribute)",
          "            If ($sharingDestination) {",
          "               $sharingDestinationAttribute = $xmlDoc.CreateAttribute('data-sharing-destination')",
          "               $sharingDestinationAttribute.Value = $sharingDestination",
          "               $newcustom.Attributes.Append($sharingDestinationAttribute)",
          "            }",
          "      }",
          "      $xmlDoc.seelog.outputs.AppendChild($newcustom)",
          "   }",
          "}",
          "Else {",
          "   echo 'Disable CloudWatchLogs Upload'",
          "   $custom = $seelog.outputs.custom",
          "   If ($custom) {",
          "      $custom.ParentNode.RemoveChild($custom)",
          "   }",
          "}",
          "$stream = [System.IO.StreamWriter] $writeFile",
          "$xmlDoc.Save($stream)",
          "$stream.Close()",
          "echo 'Applying Changes to Config File'",
          "Move-Item -force $writeFile $filePath",
          "Remove-Item -force $tempFile"
        ]
      }
    },
    {
      "action":"aws:runShellScript",
      "precondition": {
        "StringEquals": ["platformType", "Linux"]
      },
      "name":"UploadSSMAgentLogsInLinux",
      "inputs": {
        "runCommand":[
          "#!/bin/bash",
          "set -e",
          "LOGLEVEL='{{ LogLevel }}'",
          "ENABLE={{ EnableCloudWatchUpload }}",
          "LOGGROUP='{{ LogGroup }}'",
          "ENABLE_SHARING={{ EnableShare }}",
          "SHARING_DESTINATION='{{ ShareDestination }}'",
          "FORMATID='fmtdebug'",
          "FILEPATH='/etc/amazon/ssm/seelog.xml'",
          "",
          "LOGLEVEL=$(echo $LOGLEVEL | tr '[:upper:]' '[:lower:]')",
          "echo 'Log Level:'$LOGLEVEL",
          "echo 'CloudWatchLogsUpload:'$ENABLE",
          "echo 'LogGroup (Empty For Default):'$LOGGROUP",
          "echo 'Configurations Filepath:'$FILEPATH",
          "",
          "TEMPFILE=$FILEPATH'.temp'",
          "",
          "#Check if xmlstarlet is installed",
          "if ! type xmlstarlet > /dev/null 2>&1",
          "then",
          "        echo 'xmlstarlet Not Installed'",
          "        if type yum > /dev/null 2>&1",
          "        then",
          "                #For Amazon Linux, RHEL, CentOS",
          "                echo 'Installing With yum'",
          "                #Check if package available",
          "                if ! yum list xmlstarlet",
          "                then",
          "                        # xmlstarlet package not available in yum [RHEL / CentOS]. Check for epel",
          "                        if yum list epel-release",
          "                        then",
          "                                # epel-release available. [CentOS]",
          "                                yes y | yum install –y epel-release",
          "                        else",
          "                                # epel-release not available [RHEL]. Check RHEL version and get epel",
          "                                ver=`grep release /etc/system-release | sed s/.*release\\ // | sed s/\\ .*// | awk -F. '{ print $1 }'`",
          "                                yes y | yum install –y https://dl.fedoraproject.org/pub/epel/epel-release-latest-$ver.noarch.rpm",
          "                        fi",
          "                        yes y | yum-config-manager -y --enable epel",
          "                fi",
          "                yes y | yum install -y xmlstarlet",
          "        elif type apt-get > /dev/null 2>&1",
          "        then",
          "                #For Ubuntu",
          "                echo 'Installing with apt-get'",
          "                yes y | apt-get install xmlstarlet",
          "        elif type zypper > /dev/null 2>&1",
          "        then",
          "                #For SLES",
          "                echo 'Installing with zypper'",
          "                yes y | zypper --non-interactive install xmlstarlet",
          "        else",
          "                echo 'Need yum or apt or zypper to install. Exiting'",
          "                exit 1",
          "        fi",
          "        #Check for installation again",
          "        if ! type xmlstarlet > /dev/null 2>&1",
          "        then",
          "                echo 'Installation Failed. Exiting.'",
          "                exit 1",
          "        fi",
          "fi",
          "echo 'xmlstarlet installed on system'",
          "#Check if the file is present",
          "if [ ! -f $FILEPATH ]",
          "then",
          "        echo 'Seelog File Not Present'",
          "        if [ ! -f $FILEPATH'.template' ]",
          "        then",
          "                echo 'Template Not Present. Need the template or seelog config file to configure'",
          "                exit 1",
          "        else",
          "                echo 'Template Present. Copy to temp file'",
          "                cp $FILEPATH'.template' $TEMPFILE",
          "        fi",
          "else",
          "        echo 'Seelog File Present'",
          "        cp $FILEPATH $TEMPFILE",
          "fi",
          "",
          "#Changing the loglevel",
          "xmlstarlet ed --inplace -u '/seelog/@minlevel' -v $LOGLEVEL $TEMPFILE",
          "",
          "if [ \"$ENABLE\" = true ]",
          "then",
          "        echo 'Enable CloudWatchLogs Upload'",
          "        PRESENCE=`xmlstarlet sel -t --if '/seelog/outputs/custom' -o 'true' --else -o 'false' $TEMPFILE`",
          "        echo $PRESENCE",
          "        if [ \"$PRESENCE\" = true ]",
          "        then",
          "                echo 'Already Uploading To CloudWatch. Updating Configs.'",
          "                xmlstarlet ed --inplace -u '/seelog/outputs/custom/@formatid' -v $FORMATID $TEMPFILE",
          "                if [ ! -z $LOGGROUP ]",
          "                then",
          "                        PRESENCE=`xmlstarlet sel -t --if '/seelog/outputs/custom/@data-log-group' -o 'true' --else -o 'false' $TEMPFILE`",
          "                        if [ \"$PRESENCE\" = true ]",
          "                        then",
          "                                xmlstarlet ed --inplace -u '/seelog/outputs/custom/@data-log-group' -v $LOGGROUP $TEMPFILE",
          "                        else",
          "                                xmlstarlet ed --inplace -a '/seelog/outputs/custom' -t attr -n 'data-log-group' -v $LOGGROUP $TEMPFILE",
          "                        fi",
          "                fi",
          "                if [ \"$ENABLE_SHARING\" = true ]",
          "                then",
          "                        echo 'Enabling Sharing of Logs to another AWS Account'",
          "                        PRESENCE=`xmlstarlet sel -t --if '/seelog/outputs/custom/@data-log-sharing-enabled' -o 'true' --else -o 'false' $TEMPFILE`",
          "                        if [ \"$PRESENCE\" = true ]",
          "                        then",
          "                                xmlstarlet ed --inplace -u '/seelog/outputs/custom/@data-log-sharing-enabled' -v $ENABLE_SHARING $TEMPFILE",
          "                        else",
          "                                xmlstarlet ed --inplace -a '/seelog/outputs/custom' -t attr -n 'data-log-sharing-enabled' -v $ENABLE_SHARING $TEMPFILE",
          "                        fi",
          "                        if [ ! -z $SHARING_DESTINATION ]",
          "                        then",
          "                                PRESENCE=`xmlstarlet sel -t --if '/seelog/outputs/custom/@data-sharing-destination' -o 'true' --else -o 'false' $TEMPFILE`",
          "                                if [ \"$PRESENCE\" = true ]",
          "                                then",
          "                                        xmlstarlet ed --inplace -u '/seelog/outputs/custom/@data-sharing-destination' -v $SHARING_DESTINATION $TEMPFILE",
          "                                else",
          "                                        xmlstarlet ed --inplace -a '/seelog/outputs/custom' -t attr -n 'data-sharing-destination' -v $SHARING_DESTINATION $TEMPFILE",
          "                                fi",
          "                        fi",
          "                else",
          "                        PRESENCE=`xmlstarlet sel -t --if '/seelog/outputs/custom/@data-log-sharing-enabled' -o 'true' --else -o 'false' $TEMPFILE`",
          "                        if [ \"$PRESENCE\" = true ]",
          "                        then",
          "                                xmlstarlet ed --inplace -u '/seelog/outputs/custom/@data-log-sharing-enabled' -v $ENABLE_SHARING $TEMPFILE",
          "                        fi",
          "                        PRESENCE=`xmlstarlet sel -t --if '/seelog/outputs/custom/@data-sharing-destination' -o 'true' --else -o 'false' $TEMPFILE`",
          "                        if [ \"$PRESENCE\" = true ]",
          "                        then",
          "                                xmlstarlet ed --inplace -d '/seelog/outputs/custom/@data-sharing-destination' $TEMPFILE",
          "                        fi",
          "                fi",
          "        else",
          "                echo 'Currently Not Uploading To CloudWatch. Adding Configs.'",
          "                xmlstarlet ed --inplace -s /seelog/outputs -t elem -n custom -v '' $TEMPFILE",
          "                xmlstarlet ed --inplace -a /seelog/outputs/custom -t attr -n name -v 'cloudwatch_receiver' $TEMPFILE",
          "                xmlstarlet ed --inplace -a /seelog/outputs/custom -t attr -n formatid -v $FORMATID $TEMPFILE",
          "                if [ ! -z $LOGGROUP ]",
          "                then",
          "                        xmlstarlet ed --inplace -a /seelog/outputs/custom -t attr -n data-log-group -v $LOGGROUP $TEMPFILE",
          "                fi",
          "                if [ \"$ENABLE_SHARING\" = true ]",
          "                then",
          "                        xmlstarlet ed --inplace -a '/seelog/outputs/custom' -t attr -n 'data-log-sharing-enabled' -v $ENABLE_SHARING $TEMPFILE",
          "                        if [ ! -z $SHARING_DESTINATION ]",
          "                        then",
          "                                xmlstarlet ed --inplace -a '/seelog/outputs/custom' -t attr -n 'data-sharing-destination' -v $SHARING_DESTINATION $TEMPFILE",
          "                        fi",
          "                fi",
          "        fi",
          "else",
          "        echo 'Disable CloudWatchLogs Upload'",
          "        xmlstarlet ed --inplace -d /seelog/outputs/custom $TEMPFILE",
          "fi",
          "",
          "echo 'Applying Changes to Config File'",
          "mv $TEMPFILE $FILEPATH"
        ]
      }
    }
  ]
}
